import { EqualityChecker, Mutate, State, StateCreator, StateSelector, StoreApi, StoreMutatorIdentifier } from './vanilla';
export declare function useStore<S extends StoreApi<State>>(api: S): ExtractState<S>;
export declare function useStore<S extends StoreApi<State>, U>(api: S, selector: StateSelector<ExtractState<S>, U>, equalityFn?: EqualityChecker<U>): U;
declare type ExtractState<S> = S extends {
    getState: () => infer T;
} ? T : never;
export declare type UseBoundStore<S extends StoreApi<State>> = {
    (): ExtractState<S>;
    <U>(selector: StateSelector<ExtractState<S>, U>, equals?: EqualityChecker<U>): U;
} & S;
declare type Create = {
    <T extends State, Mos extends [StoreMutatorIdentifier, unknown][] = []>(initializer: StateCreator<T, [], Mos>): UseBoundStore<Mutate<StoreApi<T>, Mos>>;
    <T extends State>(): <Mos extends [StoreMutatorIdentifier, unknown][] = []>(initializer: StateCreator<T, [], Mos>) => UseBoundStore<Mutate<StoreApi<T>, Mos>>;
    <S extends StoreApi<State>>(store: S): UseBoundStore<S>;
};
declare const create: Create;
export default create;
