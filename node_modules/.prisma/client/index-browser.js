
Object.defineProperty(exports, "__esModule", { value: true });

const {
  Decimal,
  objectEnumValues
} = require('@prisma/client/runtime/index-browser')


const Prisma = {}

exports.Prisma = Prisma

/**
 * Prisma Client JS version: 4.0.0
 * Query Engine version: da41d2bb3406da22087b849f0e911199ba4fbf11
 */
Prisma.prismaVersion = {
  client: "4.0.0",
  engine: "da41d2bb3406da22087b849f0e911199ba4fbf11"
}

Prisma.PrismaClientKnownRequestError = () => {
  throw new Error(`PrismaClientKnownRequestError is unable to be run in the browser.
In case this error is unexpected for you, please report it in https://github.com/prisma/prisma/issues`,
)};
Prisma.PrismaClientUnknownRequestError = () => {
  throw new Error(`PrismaClientUnknownRequestError is unable to be run in the browser.
In case this error is unexpected for you, please report it in https://github.com/prisma/prisma/issues`,
)}
Prisma.PrismaClientRustPanicError = () => {
  throw new Error(`PrismaClientRustPanicError is unable to be run in the browser.
In case this error is unexpected for you, please report it in https://github.com/prisma/prisma/issues`,
)}
Prisma.PrismaClientInitializationError = () => {
  throw new Error(`PrismaClientInitializationError is unable to be run in the browser.
In case this error is unexpected for you, please report it in https://github.com/prisma/prisma/issues`,
)}
Prisma.PrismaClientValidationError = () => {
  throw new Error(`PrismaClientValidationError is unable to be run in the browser.
In case this error is unexpected for you, please report it in https://github.com/prisma/prisma/issues`,
)}
Prisma.Decimal = Decimal

/**
 * Re-export of sql-template-tag
 */
Prisma.sql = () => {
  throw new Error(`sqltag is unable to be run in the browser.
In case this error is unexpected for you, please report it in https://github.com/prisma/prisma/issues`,
)}
Prisma.empty = () => {
  throw new Error(`empty is unable to be run in the browser.
In case this error is unexpected for you, please report it in https://github.com/prisma/prisma/issues`,
)}
Prisma.join = () => {
  throw new Error(`join is unable to be run in the browser.
In case this error is unexpected for you, please report it in https://github.com/prisma/prisma/issues`,
)}
Prisma.raw = () => {
  throw new Error(`raw is unable to be run in the browser.
In case this error is unexpected for you, please report it in https://github.com/prisma/prisma/issues`,
)}
Prisma.validator = () => (val) => val

/**
 * Shorthand utilities for JSON filtering
 */
Prisma.DbNull = objectEnumValues.instances.DbNull
Prisma.JsonNull = objectEnumValues.instances.JsonNull
Prisma.AnyNull = objectEnumValues.instances.AnyNull

Prisma.NullTypes = {
  DbNull: objectEnumValues.classes.DbNull,
  JsonNull: objectEnumValues.classes.JsonNull,
  AnyNull: objectEnumValues.classes.AnyNull
}

/**
 * Enums
 */
// Based on
// https://github.com/microsoft/TypeScript/issues/3192#issuecomment-261720275
function makeEnum(x) { return x; }

exports.Prisma.UsersScalarFieldEnum = makeEnum({
  id: 'id',
  name: 'name',
  image: 'image',
  username: 'username',
  password: 'password',
  isAdmin: 'isAdmin',
  isSuperUser: 'isSuperUser',
  dateJoined: 'dateJoined'
});

exports.Prisma.PinScalarFieldEnum = makeEnum({
  id: 'id',
  pin: 'pin',
  active: 'active',
  used: 'used',
  days: 'days',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt',
  categoryId: 'categoryId'
});

exports.Prisma.CategoryScalarFieldEnum = makeEnum({
  id: 'id',
  name: 'name',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
});

exports.Prisma.SubjectScalarFieldEnum = makeEnum({
  id: 'id',
  subjectName: 'subjectName',
  subjectDefinition: 'subjectDefinition',
  imageLocation: 'imageLocation',
  published: 'published',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt',
  usersId: 'usersId'
});

exports.Prisma.FormScalarFieldEnum = makeEnum({
  id: 'id',
  formName: 'formName',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt',
  usersId: 'usersId'
});

exports.Prisma.TopicScalarFieldEnum = makeEnum({
  id: 'id',
  topicName: 'topicName',
  topicDefinition: 'topicDefinition',
  published: 'published',
  subjectId: 'subjectId',
  formId: 'formId',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt',
  usersId: 'usersId'
});

exports.Prisma.NoteScalarFieldEnum = makeEnum({
  id: 'id',
  content: 'content',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt',
  published: 'published',
  subjectId: 'subjectId',
  formId: 'formId',
  usersId: 'usersId',
  topicId: 'topicId'
});

exports.Prisma.NotesDownloadableScalarFieldEnum = makeEnum({
  id: 'id',
  name: 'name',
  link: 'link',
  fileExtension: 'fileExtension',
  published: 'published',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt',
  formId: 'formId',
  subjectId: 'subjectId',
  usersId: 'usersId'
});

exports.Prisma.SubjectReviewScalarFieldEnum = makeEnum({
  id: 'id',
  subjectName: 'subjectName',
  subjectDefinition: 'subjectDefinition',
  imageLocation: 'imageLocation',
  published: 'published',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt',
  usersId: 'usersId'
});

exports.Prisma.FormReviewScalarFieldEnum = makeEnum({
  id: 'id',
  formName: 'formName',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt',
  usersId: 'usersId'
});

exports.Prisma.TopicReviewScalarFieldEnum = makeEnum({
  id: 'id',
  topicName: 'topicName',
  topicDefinition: 'topicDefinition',
  published: 'published',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt',
  subjectId: 'subjectId',
  formId: 'formId',
  usersId: 'usersId'
});

exports.Prisma.ReviewScalarFieldEnum = makeEnum({
  id: 'id',
  name: 'name',
  published: 'published',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt',
  topicId: 'topicId',
  subjectId: 'subjectId',
  formId: 'formId'
});

exports.Prisma.QuestionScalarFieldEnum = makeEnum({
  id: 'id',
  question: 'question',
  published: 'published',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt',
  answerDetails: 'answerDetails',
  questionFormatId: 'questionFormatId',
  reviewId: 'reviewId',
  usersId: 'usersId'
});

exports.Prisma.QuestionFormatScalarFieldEnum = makeEnum({
  id: 'id',
  name: 'name',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
});

exports.Prisma.AnswerScalarFieldEnum = makeEnum({
  id: 'id',
  answer: 'answer',
  valid: 'valid',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt',
  questionId: 'questionId'
});

exports.Prisma.SubjectExamsScalarFieldEnum = makeEnum({
  id: 'id',
  subjectName: 'subjectName',
  subjectDefinition: 'subjectDefinition',
  imageLocation: 'imageLocation',
  published: 'published',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt',
  usersId: 'usersId'
});

exports.Prisma.FormExamsScalarFieldEnum = makeEnum({
  id: 'id',
  formName: 'formName',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt',
  usersId: 'usersId'
});

exports.Prisma.ExamTypeScalarFieldEnum = makeEnum({
  id: 'id',
  name: 'name',
  definition: 'definition',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt',
  published: 'published',
  subjectId: 'subjectId',
  formId: 'formId'
});

exports.Prisma.ExamScalarFieldEnum = makeEnum({
  id: 'id',
  description: 'description',
  year: 'year',
  hasAnswers: 'hasAnswers',
  published: 'published',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt',
  examTypeId: 'examTypeId',
  exam: 'exam',
  usersId: 'usersId'
});

exports.Prisma.ExamDownloadableScalarFieldEnum = makeEnum({
  id: 'id',
  name: 'name',
  link: 'link',
  fileExtension: 'fileExtension',
  published: 'published',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt',
  examId: 'examId',
  usersId: 'usersId'
});

exports.Prisma.SubjectReferenceScalarFieldEnum = makeEnum({
  id: 'id',
  subjectName: 'subjectName',
  subjectDefinition: 'subjectDefinition',
  imageLocation: 'imageLocation',
  published: 'published',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt',
  usersId: 'usersId'
});

exports.Prisma.FormReferenceScalarFieldEnum = makeEnum({
  id: 'id',
  formName: 'formName',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt',
  usersId: 'usersId'
});

exports.Prisma.ReferenceScalarFieldEnum = makeEnum({
  id: 'id',
  name: 'name',
  description: 'description',
  data: 'data',
  isPdf: 'isPdf',
  published: 'published',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt',
  subjectId: 'subjectId',
  usersId: 'usersId'
});

exports.Prisma.SortOrder = makeEnum({
  asc: 'asc',
  desc: 'desc'
});

exports.Prisma.usersOrderByRelevanceFieldEnum = makeEnum({
  name: 'name',
  image: 'image',
  username: 'username',
  password: 'password'
});

exports.Prisma.categoryOrderByRelevanceFieldEnum = makeEnum({
  name: 'name'
});

exports.Prisma.subjectOrderByRelevanceFieldEnum = makeEnum({
  subjectName: 'subjectName',
  subjectDefinition: 'subjectDefinition',
  imageLocation: 'imageLocation'
});

exports.Prisma.formOrderByRelevanceFieldEnum = makeEnum({
  formName: 'formName'
});

exports.Prisma.topicOrderByRelevanceFieldEnum = makeEnum({
  topicName: 'topicName',
  topicDefinition: 'topicDefinition'
});

exports.Prisma.noteOrderByRelevanceFieldEnum = makeEnum({
  content: 'content'
});

exports.Prisma.notesDownloadableOrderByRelevanceFieldEnum = makeEnum({
  name: 'name',
  link: 'link',
  fileExtension: 'fileExtension'
});

exports.Prisma.subjectReviewOrderByRelevanceFieldEnum = makeEnum({
  subjectName: 'subjectName',
  subjectDefinition: 'subjectDefinition',
  imageLocation: 'imageLocation'
});

exports.Prisma.formReviewOrderByRelevanceFieldEnum = makeEnum({
  formName: 'formName'
});

exports.Prisma.topicReviewOrderByRelevanceFieldEnum = makeEnum({
  topicName: 'topicName',
  topicDefinition: 'topicDefinition'
});

exports.Prisma.reviewOrderByRelevanceFieldEnum = makeEnum({
  name: 'name'
});

exports.Prisma.questionOrderByRelevanceFieldEnum = makeEnum({
  question: 'question',
  answerDetails: 'answerDetails'
});

exports.Prisma.questionFormatOrderByRelevanceFieldEnum = makeEnum({
  name: 'name'
});

exports.Prisma.answerOrderByRelevanceFieldEnum = makeEnum({
  answer: 'answer'
});

exports.Prisma.subjectExamsOrderByRelevanceFieldEnum = makeEnum({
  subjectName: 'subjectName',
  subjectDefinition: 'subjectDefinition',
  imageLocation: 'imageLocation'
});

exports.Prisma.formExamsOrderByRelevanceFieldEnum = makeEnum({
  formName: 'formName'
});

exports.Prisma.examTypeOrderByRelevanceFieldEnum = makeEnum({
  name: 'name',
  definition: 'definition'
});

exports.Prisma.examOrderByRelevanceFieldEnum = makeEnum({
  description: 'description',
  exam: 'exam'
});

exports.Prisma.examDownloadableOrderByRelevanceFieldEnum = makeEnum({
  name: 'name',
  link: 'link',
  fileExtension: 'fileExtension'
});

exports.Prisma.subjectReferenceOrderByRelevanceFieldEnum = makeEnum({
  subjectName: 'subjectName',
  subjectDefinition: 'subjectDefinition',
  imageLocation: 'imageLocation'
});

exports.Prisma.formReferenceOrderByRelevanceFieldEnum = makeEnum({
  formName: 'formName'
});

exports.Prisma.referenceOrderByRelevanceFieldEnum = makeEnum({
  name: 'name',
  description: 'description',
  data: 'data'
});


exports.Prisma.ModelName = makeEnum({
  users: 'users',
  pin: 'pin',
  category: 'category',
  subject: 'subject',
  form: 'form',
  topic: 'topic',
  note: 'note',
  notesDownloadable: 'notesDownloadable',
  subjectReview: 'subjectReview',
  formReview: 'formReview',
  topicReview: 'topicReview',
  review: 'review',
  question: 'question',
  questionFormat: 'questionFormat',
  answer: 'answer',
  subjectExams: 'subjectExams',
  formExams: 'formExams',
  examType: 'examType',
  exam: 'exam',
  examDownloadable: 'examDownloadable',
  subjectReference: 'subjectReference',
  formReference: 'formReference',
  reference: 'reference'
});

/**
 * Create the Client
 */
class PrismaClient {
  constructor() {
    throw new Error(
      `PrismaClient is unable to be run in the browser.
In case this error is unexpected for you, please report it in https://github.com/prisma/prisma/issues`,
    )
  }
}
exports.PrismaClient = PrismaClient

Object.assign(exports, Prisma)
