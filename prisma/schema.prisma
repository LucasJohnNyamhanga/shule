generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["fullTextSearch", "fullTextIndex"]
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model users {
  id                Int                 @id @default(autoincrement())
  firstName         String
  lastName          String
  image             String?
  username          String?
  password          String?
  isAdmin           Boolean             @default(false)
  isSuperUser       Boolean             @default(false)
  dateJoined        DateTime            @default(now())
  subject           subject[]
  form              form[]
  topic             topic[]
  note              note[]
  subjectReview     subjectReview[]
  formReview        formReview[]
  topicReview       topicReview[]
  question          question[]
  subjectExams      subjectExams[]
  formExams         formExams[]
  exam              exam[]
  subjectReference  subjectReference[]
  formReference     formReference[]
  reference         reference[]
  notesDownloadable notesDownloadable[]
}

model subject {
  id                Int     @id @default(autoincrement())
  subjectName       String
  subjectDefinition String  @db.LongText
  imageLocation     String?
  published         Boolean @default(false)
  forms             form[]
  topic             topic[]
  note              note[]
  usersId           Int     @default(1)
  users             users   @relation(fields: [usersId], references: [id])

  notesDownloadable notesDownloadable[]
  @@fulltext([subjectName, subjectDefinition])
}

model form {
  id                Int                 @id @default(autoincrement())
  formName          String
  subjects          subject[]
  topic             topic[]
  note              note[]
  usersId           Int                 @default(1)
  users             users               @relation(fields: [usersId], references: [id])
  notesDownloadable notesDownloadable[]
}

model topic {
  id              Int     @id @default(autoincrement())
  topicName       String
  topicDefinition String?
  published       Boolean @default(false)
  subjectId       Int
  formId          Int
  subject         subject @relation(fields: [subjectId], references: [id])
  form            form    @relation(fields: [formId], references: [id])
  note            note?
  usersId         Int     @default(1)
  users           users   @relation(fields: [usersId], references: [id])

  @@fulltext([topicName, topicDefinition])
}

model note {
  id        Int      @id @default(autoincrement())
  content   String   @db.LongText
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  published Boolean  @default(false)
  subjectId Int
  formId    Int
  usersId   Int      @default(1)
  topicId   Int      @unique
  subject   subject  @relation(fields: [subjectId], references: [id])
  form      form     @relation(fields: [formId], references: [id])
  topic     topic    @relation(fields: [topicId], references: [id])
  users     users    @relation(fields: [usersId], references: [id])

  @@fulltext([content])
}

model notesDownloadable {
  id        Int     @id @default(autoincrement())
  content   String
  isPdf     Boolean
  published Boolean @default(false)
  formId    Int     @unique
  form      form    @relation(fields: [formId], references: [id])
  subjectId Int
  subject   subject @relation(fields: [subjectId], references: [id])
  usersId   Int     @default(1)
  users     users   @relation(fields: [usersId], references: [id])
}

model subjectReview {
  id                Int           @id @default(autoincrement())
  subjectName       String
  subjectDefinition String        @db.LongText
  imageLocation     String?
  published         Boolean       @default(false)
  forms             formReview[]
  topic             topicReview[]
  review            review[]
  usersId           Int           @default(1)
  users             users         @relation(fields: [usersId], references: [id])

  @@fulltext([subjectName, subjectDefinition])
}

model formReview {
  id       Int             @id @default(autoincrement())
  formName String
  subjects subjectReview[]
  topic    topicReview[]
  review   review[]
  usersId  Int             @default(1)
  users    users           @relation(fields: [usersId], references: [id])
}

model topicReview {
  id              Int           @id @default(autoincrement())
  topicName       String
  topicDefinition String?
  published       Boolean       @default(false)
  subjectId       Int
  formId          Int
  subject         subjectReview @relation(fields: [subjectId], references: [id])
  form            formReview    @relation(fields: [formId], references: [id])
  usersId         Int           @default(1)
  users           users         @relation(fields: [usersId], references: [id])
  review          review[]

  @@fulltext([topicName, topicDefinition])
}

model review {
  id        Int           @id @default(autoincrement())
  name      String
  published Boolean       @default(false)
  topicId   Int
  topic     topicReview   @relation(fields: [topicId], references: [id])
  subjectId Int
  subject   subjectReview @relation(fields: [subjectId], references: [id])
  formId    Int
  form      formReview    @relation(fields: [formId], references: [id])
  question  question[]

  @@fulltext([name])
}

model question {
  id               Int            @id @default(autoincrement())
  question         String         @db.LongText
  published        Boolean        @default(false)
  answer           answer[]
  answerDetails    String         @default("") @db.LongText
  questionFormatId Int
  questionFormat   questionFormat @relation(fields: [questionFormatId], references: [id])
  reviewId         Int
  review           review         @relation(fields: [reviewId], references: [id])
  usersId          Int            @default(1)
  users            users          @relation(fields: [usersId], references: [id])

  @@fulltext([question])
}

model questionFormat {
  id       Int        @id @default(autoincrement())
  name     String
  question question[]
}

model answer {
  id         Int      @id @default(autoincrement())
  answer     String   @db.LongText
  valid      Boolean  @default(false)
  questionId Int
  question   question @relation(fields: [questionId], references: [id])

  @@fulltext([answer])
}

//Exams

model subjectExams {
  id                Int         @id @default(autoincrement())
  subjectName       String
  subjectDefinition String      @db.LongText
  imageLocation     String?
  published         Boolean     @default(false)
  forms             formExams[]
  examType          examType[]
  usersId           Int         @default(1)
  users             users       @relation(fields: [usersId], references: [id])

  @@fulltext([subjectName, subjectDefinition])
}

model formExams {
  id       Int            @id @default(autoincrement())
  formName String
  subjects subjectExams[]
  examType examType[]
  usersId  Int            @default(1)
  users    users          @relation(fields: [usersId], references: [id])
}

model examType {
  id           Int          @id @default(autoincrement())
  name         String
  definition   String       @db.LongText
  published    Boolean      @default(false)
  subjectId    Int
  subjectExams subjectExams @relation(fields: [subjectId], references: [id])
  formId       Int
  formExams    formExams    @relation(fields: [formId], references: [id])
  exam         exam[]

  @@fulltext([name, definition])
}

model exam {
  id          Int      @id @default(autoincrement())
  description String   @db.LongText
  year        Int
  hasAnswers  Boolean  @default(false)
  published   Boolean  @default(false)
  examTypeId  Int
  examType    examType @relation(fields: [examTypeId], references: [id])
  exam        String   @db.LongText
  usersId     Int      @default(1)
  users       users    @relation(fields: [usersId], references: [id])

  @@fulltext([description, exam])
}

//references

model subjectReference {
  id                Int             @id @default(autoincrement())
  subjectName       String
  subjectDefinition String          @db.LongText
  imageLocation     String?
  published         Boolean         @default(false)
  forms             formReference[]
  reference         reference[]
  usersId           Int             @default(1)
  users             users           @relation(fields: [usersId], references: [id])

  @@fulltext([subjectDefinition, subjectName])
}

model formReference {
  id        Int                @id @default(autoincrement())
  formName  String
  subjects  subjectReference[]
  reference reference[]
  usersId   Int                @default(1)
  users     users              @relation(fields: [usersId], references: [id])
}

model reference {
  id               Int              @id @default(autoincrement())
  name             String
  description      String           @db.LongText
  data             String           @db.LongText
  isPdf            Boolean
  published        Boolean          @default(false)
  subjectId        Int
  subjectReference subjectReference @relation(fields: [subjectId], references: [id])
  formReference    formReference[]
  usersId          Int              @default(1)
  users            users            @relation(fields: [usersId], references: [id])

  @@fulltext([name, description, data])
}
