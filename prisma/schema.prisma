generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["fullTextSearch", "fullTextIndex"]
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model users {
  id                Int                 @id @default(autoincrement())
  name              String              @db.Text
  image             String?
  username          String              @db.Text
  password          String
  isAdmin           Boolean             @default(false)
  isSuperUser       Boolean             @default(false)
  isOnline          Boolean             @default(false)
  dateJoined        DateTime            @default(now())
  updatedAt         DateTime            @updatedAt
  subject           subject[]
  form              form[]
  topic             topic[]
  note              note[]
  subjectReview     subjectReview[]
  formReview        formReview[]
  topicReview       topicReview[]
  question          question[]
  subjectExams      subjectExams[]
  formExams         formExams[]
  exam              exam[]
  subjectReference  subjectReference[]
  formReference     formReference[]
  reference         reference[]
  notesDownloadable notesDownloadable[]
  examDownloadable  examDownloadable[]
  review            review[]
  vifurushi         vifurushi[]
  purchase          purchase[]

  @@fulltext([username])
  @@fulltext([name])
  @@fulltext([username, name])
}

model vifurushi {
  id      Int    @id @default(autoincrement())
  name    String
  value   Int
  usersId Int
  users   users  @relation(fields: [usersId], references: [id])
}

model purchase {
  id      Int    @id @default(autoincrement())
  name    String
  value   Int
  usersId Int
  users   users  @relation(fields: [usersId], references: [id])
}

model subject {
  id                Int      @id @default(autoincrement())
  subjectName       String
  subjectDefinition String   @db.LongText
  imageLocation     String?
  published         Boolean  @default(false)
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt
  forms             form[]
  topic             topic[]
  note              note[]
  usersId           Int
  users             users    @relation(fields: [usersId], references: [id])

  notesDownloadable notesDownloadable[]

  @@fulltext([subjectName, subjectDefinition])
}

model form {
  id                Int                 @id @default(autoincrement())
  formName          String
  createdAt         DateTime            @default(now())
  updatedAt         DateTime            @updatedAt
  subjects          subject[]
  topic             topic[]
  note              note[]
  usersId           Int
  users             users               @relation(fields: [usersId], references: [id])
  notesDownloadable notesDownloadable[]
}

model topic {
  id              Int      @id @default(autoincrement())
  topicName       String
  topicDefinition String?
  published       Boolean  @default(false)
  subjectId       Int
  formId          Int
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt
  subject         subject  @relation(fields: [subjectId], references: [id])
  form            form     @relation(fields: [formId], references: [id])
  note            note?
  usersId         Int
  users           users    @relation(fields: [usersId], references: [id])

  @@fulltext([topicName, topicDefinition])
}

model note {
  id        Int      @id @default(autoincrement())
  content   String   @db.LongText
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  published Boolean  @default(false)
  subjectId Int
  formId    Int
  usersId   Int
  topicId   Int      @unique
  subject   subject  @relation(fields: [subjectId], references: [id])
  form      form     @relation(fields: [formId], references: [id])
  topic     topic    @relation(fields: [topicId], references: [id])
  users     users    @relation(fields: [usersId], references: [id])

  @@fulltext([content])
}

model notesDownloadable {
  id            Int      @id @default(autoincrement())
  name          String
  link          String
  fileExtension String
  published     Boolean  @default(false)
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
  formId        Int
  form          form     @relation(fields: [formId], references: [id])
  subjectId     Int
  subject       subject  @relation(fields: [subjectId], references: [id])
  usersId       Int
  users         users    @relation(fields: [usersId], references: [id])
}

model subjectReview {
  id                Int           @id @default(autoincrement())
  subjectName       String
  subjectDefinition String        @db.LongText
  imageLocation     String?
  published         Boolean       @default(false)
  createdAt         DateTime      @default(now())
  updatedAt         DateTime      @updatedAt
  forms             formReview[]
  topic             topicReview[]
  review            review[]
  usersId           Int
  users             users         @relation(fields: [usersId], references: [id])

  @@fulltext([subjectName, subjectDefinition])
}

model formReview {
  id        Int             @id @default(autoincrement())
  formName  String
  createdAt DateTime        @default(now())
  updatedAt DateTime        @updatedAt
  subjects  subjectReview[]
  topic     topicReview[]
  review    review[]
  usersId   Int
  users     users           @relation(fields: [usersId], references: [id])
}

model topicReview {
  id              Int           @id @default(autoincrement())
  topicName       String
  topicDefinition String?
  published       Boolean       @default(false)
  createdAt       DateTime      @default(now())
  updatedAt       DateTime      @updatedAt
  subjectId       Int
  formId          Int
  subject         subjectReview @relation(fields: [subjectId], references: [id])
  form            formReview    @relation(fields: [formId], references: [id])
  usersId         Int
  users           users         @relation(fields: [usersId], references: [id])
  review          review[]

  @@fulltext([topicName, topicDefinition])
}

model review {
  id        Int           @id @default(autoincrement())
  name      String
  published Boolean       @default(false)
  createdAt DateTime      @default(now())
  updatedAt DateTime      @updatedAt
  topicId   Int
  topic     topicReview   @relation(fields: [topicId], references: [id])
  subjectId Int
  subject   subjectReview @relation(fields: [subjectId], references: [id])
  formId    Int
  form      formReview    @relation(fields: [formId], references: [id])
  usersId   Int
  users     users         @relation(fields: [usersId], references: [id])
  question  question[]

  @@fulltext([name])
}

model question {
  id               Int            @id @default(autoincrement())
  question         String         @db.LongText
  published        Boolean        @default(false)
  createdAt        DateTime       @default(now())
  updatedAt        DateTime       @updatedAt
  answer           answer[]
  answerDetails    String         @default("") @db.LongText
  questionFormatId Int
  questionFormat   questionFormat @relation(fields: [questionFormatId], references: [id])
  reviewId         Int
  review           review         @relation(fields: [reviewId], references: [id])
  usersId          Int
  users            users          @relation(fields: [usersId], references: [id])

  @@fulltext([question])
}

model questionFormat {
  id        Int        @id @default(autoincrement())
  name      String
  createdAt DateTime   @default(now())
  updatedAt DateTime   @updatedAt
  question  question[]
}

model answer {
  id         Int      @id @default(autoincrement())
  answer     String   @db.LongText
  valid      Boolean  @default(false)
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
  questionId Int
  question   question @relation(fields: [questionId], references: [id])

  @@fulltext([answer])
}

//Exams

model subjectExams {
  id                Int         @id @default(autoincrement())
  subjectName       String
  subjectDefinition String      @db.LongText
  imageLocation     String?
  published         Boolean     @default(false)
  createdAt         DateTime    @default(now())
  updatedAt         DateTime    @updatedAt
  forms             formExams[]
  examType          examType[]
  usersId           Int
  users             users       @relation(fields: [usersId], references: [id])

  @@fulltext([subjectName, subjectDefinition])
}

model formExams {
  id        Int            @id @default(autoincrement())
  formName  String
  createdAt DateTime       @default(now())
  updatedAt DateTime       @updatedAt
  subjects  subjectExams[]
  examType  examType[]
  usersId   Int
  users     users          @relation(fields: [usersId], references: [id])
}

model examType {
  id           Int          @id @default(autoincrement())
  name         String
  definition   String       @db.LongText
  createdAt    DateTime     @default(now())
  updatedAt    DateTime     @updatedAt
  published    Boolean      @default(false)
  subjectId    Int
  subjectExams subjectExams @relation(fields: [subjectId], references: [id])
  formId       Int
  formExams    formExams    @relation(fields: [formId], references: [id])
  exam         exam[]

  @@fulltext([name, definition])
}

model exam {
  id               Int                @id @default(autoincrement())
  description      String             @db.LongText
  year             Int
  hasAnswers       Boolean            @default(false)
  published        Boolean            @default(false)
  createdAt        DateTime           @default(now())
  updatedAt        DateTime           @updatedAt
  examTypeId       Int
  examType         examType           @relation(fields: [examTypeId], references: [id])
  exam             String             @db.LongText
  usersId          Int
  users            users              @relation(fields: [usersId], references: [id])
  examDownloadable examDownloadable[]

  @@fulltext([description, exam])
}

model examDownloadable {
  id            Int      @id @default(autoincrement())
  name          String
  link          String
  fileExtension String
  published     Boolean  @default(false)
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
  examId        Int
  exam          exam     @relation(fields: [examId], references: [id])
  usersId       Int
  users         users    @relation(fields: [usersId], references: [id])
}

//references

model subjectReference {
  id                Int             @id @default(autoincrement())
  subjectName       String
  subjectDefinition String          @db.LongText
  imageLocation     String?
  published         Boolean         @default(false)
  createdAt         DateTime        @default(now())
  updatedAt         DateTime        @updatedAt
  forms             formReference[]
  reference         reference[]
  usersId           Int
  users             users           @relation(fields: [usersId], references: [id])

  @@fulltext([subjectDefinition, subjectName])
}

model formReference {
  id        Int                @id @default(autoincrement())
  formName  String
  createdAt DateTime           @default(now())
  updatedAt DateTime           @updatedAt
  subjects  subjectReference[]
  reference reference[]
  usersId   Int
  users     users              @relation(fields: [usersId], references: [id])
}

model reference {
  id               Int              @id @default(autoincrement())
  name             String
  description      String           @db.LongText
  data             String           @db.LongText
  isPdf            Boolean
  published        Boolean          @default(false)
  createdAt        DateTime         @default(now())
  updatedAt        DateTime         @updatedAt
  subjectId        Int
  subjectReference subjectReference @relation(fields: [subjectId], references: [id])
  formReference    formReference[]
  usersId          Int
  users            users            @relation(fields: [usersId], references: [id])

  @@fulltext([name, description, data])
}
