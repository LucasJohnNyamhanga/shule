generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["fullTextSearch", "fullTextIndex"]
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
  // shadowDatabaseUrl = env("SHADOW_DATABASE_URL")
}

model users {
  id                Int                 @id @default(autoincrement())
  image             String?
  username          String              @db.Text
  password          String
  isAdmin           Boolean             @default(false)
  isSuperUser       Boolean             @default(false)
  dateJoined        DateTime            @default(now())
  name              String              @db.Text
  updatedAt         DateTime            @updatedAt
  isOnline          Boolean             @default(false)
  exam              exam[]
  examDownloadable  examDownloadable[]
  form              form[]
  formExams         formExams[]
  formReference     formReference[]
  formReview        formReview[]
  note              note[]
  notesDownloadable notesDownloadable[]
  purchase          purchase[]
  question          question[]
  reference         reference[]
  review            review[]
  subject           subject[]
  subjectExams      subjectExams[]
  subjectReference  subjectReference[]
  subjectReview     subjectReview[]
  topic             topic[]
  topicReview       topicReview[]
  vifurushi         vifurushi[]
  order             order[]

  @@fulltext([username])
  @@fulltext([name])
  @@fulltext([username, name])
}

model vifurushi {
  id     Int    @id @default(autoincrement())
  name   String
  value  Int    @db.Int
  userId Int    @db.Int
  users  users  @relation(fields: [userId], references: [id])
}

model vifurushiPackage {
  id                    Int    @id @default(autoincrement())
  name                  String @db.Text
  description           String @db.Text
  price                 Int
  booksDownload         Int
  examAccess            Int
  examsSolvedDownload   Int
  examsUnsolvedDownload Int
  notesDownload         Int
  quizExcercises        Int
}

model order {
  id                    Int      @id @default(autoincrement())
  orderNumber           String   @db.Text
  description           String   @db.Text
  amountPaid            Int
  booksDownload         Int
  examAccess            Int
  examsSolvedDownload   Int
  examsUnsolvedDownload Int
  notesDownload         Int
  quizExcercises        Int
  createdAt             DateTime @default(now())
  status                Boolean  @default(true)
  userId                Int      @db.Int
  users                 users    @relation(fields: [userId], references: [id])

  @@fulltext([orderNumber])
  @@fulltext([description])
  @@fulltext([orderNumber, description])
}

model purchase {
  id      Int    @id @default(autoincrement())
  name    String
  value   Int
  usersId Int
  users   users  @relation(fields: [usersId], references: [id])

  @@index([usersId], map: "purchase_usersId_fkey")
}

model subject {
  id                Int                 @id @default(autoincrement())
  subjectName       String
  subjectDefinition String              @db.LongText
  imageLocation     String?
  published         Boolean             @default(false)
  usersId           Int
  createdAt         DateTime            @default(now())
  updatedAt         DateTime            @updatedAt
  users             users               @relation(fields: [usersId], references: [id])
  note              note[]
  notesDownloadable notesDownloadable[]
  topic             topic[]
  forms             form[]

  @@index([usersId], map: "subject_usersId_fkey")
  @@fulltext([subjectName, subjectDefinition])
}

model form {
  id                Int                 @id @default(autoincrement())
  formName          String
  usersId           Int
  createdAt         DateTime            @default(now())
  updatedAt         DateTime            @updatedAt
  users             users               @relation(fields: [usersId], references: [id])
  note              note[]
  notesDownloadable notesDownloadable[]
  topic             topic[]
  subjects          subject[]

  @@index([usersId], map: "form_usersId_fkey")
}

model topic {
  id              Int      @id @default(autoincrement())
  topicName       String
  topicDefinition String?
  published       Boolean  @default(false)
  subjectId       Int
  formId          Int
  usersId         Int
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt
  form            form     @relation(fields: [formId], references: [id])
  subject         subject  @relation(fields: [subjectId], references: [id])
  users           users    @relation(fields: [usersId], references: [id])
  note            note?

  @@index([formId], map: "topic_formId_fkey")
  @@index([subjectId], map: "topic_subjectId_fkey")
  @@index([usersId], map: "topic_usersId_fkey")
  @@fulltext([topicName, topicDefinition])
}

model note {
  id        Int      @id @default(autoincrement())
  content   String   @db.LongText
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  published Boolean  @default(false)
  subjectId Int
  formId    Int
  usersId   Int
  topicId   Int      @unique
  form      form     @relation(fields: [formId], references: [id])
  subject   subject  @relation(fields: [subjectId], references: [id])
  topic     topic    @relation(fields: [topicId], references: [id])
  users     users    @relation(fields: [usersId], references: [id])

  @@index([formId], map: "note_formId_fkey")
  @@index([subjectId], map: "note_subjectId_fkey")
  @@index([usersId], map: "note_usersId_fkey")
  @@fulltext([content])
}

model notesDownloadable {
  id            Int      @id @default(autoincrement())
  link          String
  fileExtension String
  published     Boolean  @default(false)
  formId        Int
  subjectId     Int
  usersId       Int
  name          String
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
  form          form     @relation(fields: [formId], references: [id])
  subject       subject  @relation(fields: [subjectId], references: [id])
  users         users    @relation(fields: [usersId], references: [id])

  @@index([formId], map: "notesDownloadable_formId_fkey")
  @@index([subjectId], map: "notesDownloadable_subjectId_fkey")
  @@index([usersId], map: "notesDownloadable_usersId_fkey")
}

model subjectReview {
  id                Int           @id @default(autoincrement())
  subjectName       String
  subjectDefinition String        @db.LongText
  imageLocation     String?
  published         Boolean       @default(false)
  usersId           Int
  createdAt         DateTime      @default(now())
  updatedAt         DateTime      @updatedAt
  users             users         @relation(fields: [usersId], references: [id])
  review            review[]
  topic             topicReview[]
  forms             formReview[]

  @@index([usersId], map: "subjectReview_usersId_fkey")
  @@fulltext([subjectName, subjectDefinition])
}

model formReview {
  id        Int             @id @default(autoincrement())
  formName  String
  usersId   Int
  createdAt DateTime        @default(now())
  updatedAt DateTime        @updatedAt
  users     users           @relation(fields: [usersId], references: [id])
  review    review[]
  topic     topicReview[]
  subjects  subjectReview[]

  @@index([usersId], map: "formReview_usersId_fkey")
}

model topicReview {
  id              Int           @id @default(autoincrement())
  topicName       String
  topicDefinition String?
  published       Boolean       @default(false)
  subjectId       Int
  formId          Int
  usersId         Int
  createdAt       DateTime      @default(now())
  updatedAt       DateTime      @updatedAt
  form            formReview    @relation(fields: [formId], references: [id])
  subject         subjectReview @relation(fields: [subjectId], references: [id])
  users           users         @relation(fields: [usersId], references: [id])
  review          review[]

  @@index([formId], map: "topicReview_formId_fkey")
  @@index([subjectId], map: "topicReview_subjectId_fkey")
  @@index([usersId], map: "topicReview_usersId_fkey")
  @@fulltext([topicName, topicDefinition])
}

model review {
  id        Int           @id @default(autoincrement())
  name      String
  published Boolean       @default(false)
  topicId   Int
  subjectId Int
  formId    Int
  createdAt DateTime      @default(now())
  updatedAt DateTime      @updatedAt
  usersId   Int
  form      formReview    @relation(fields: [formId], references: [id])
  subject   subjectReview @relation(fields: [subjectId], references: [id])
  topic     topicReview   @relation(fields: [topicId], references: [id])
  users     users         @relation(fields: [usersId], references: [id])
  question  question[]

  @@index([formId], map: "review_formId_fkey")
  @@index([subjectId], map: "review_subjectId_fkey")
  @@index([topicId], map: "review_topicId_fkey")
  @@index([usersId], map: "review_usersId_fkey")
  @@fulltext([name])
}

model question {
  id               Int            @id @default(autoincrement())
  question         String         @db.LongText
  published        Boolean        @default(false)
  answerDetails    String         @default("") @db.LongText
  questionFormatId Int
  reviewId         Int
  usersId          Int
  createdAt        DateTime       @default(now())
  updatedAt        DateTime       @updatedAt
  questionFormat   questionFormat @relation(fields: [questionFormatId], references: [id])
  review           review         @relation(fields: [reviewId], references: [id])
  users            users          @relation(fields: [usersId], references: [id])
  answer           answer[]

  @@index([questionFormatId], map: "question_questionFormatId_fkey")
  @@index([reviewId], map: "question_reviewId_fkey")
  @@index([usersId], map: "question_usersId_fkey")
  @@fulltext([question])
}

model questionFormat {
  id        Int        @id @default(autoincrement())
  name      String
  createdAt DateTime   @default(now())
  updatedAt DateTime   @updatedAt
  question  question[]
}

model answer {
  id         Int      @id @default(autoincrement())
  answer     String   @db.LongText
  valid      Boolean  @default(false)
  questionId Int
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
  question   question @relation(fields: [questionId], references: [id])

  @@index([questionId], map: "answer_questionId_fkey")
  @@fulltext([answer])
}

model subjectExams {
  id                Int         @id @default(autoincrement())
  subjectName       String
  subjectDefinition String      @db.LongText
  imageLocation     String?
  published         Boolean     @default(false)
  usersId           Int
  createdAt         DateTime    @default(now())
  updatedAt         DateTime    @updatedAt
  users             users       @relation(fields: [usersId], references: [id])
  examType          examType[]
  forms             formExams[]

  @@index([usersId], map: "subjectExams_usersId_fkey")
  @@fulltext([subjectName, subjectDefinition])
}

model formExams {
  id        Int            @id @default(autoincrement())
  formName  String
  usersId   Int
  createdAt DateTime       @default(now())
  updatedAt DateTime       @updatedAt
  users     users          @relation(fields: [usersId], references: [id])
  examType  examType[]
  subjects  subjectExams[]

  @@index([usersId], map: "formExams_usersId_fkey")
}

model examType {
  id           Int          @id @default(autoincrement())
  name         String
  definition   String       @db.LongText
  published    Boolean      @default(false)
  subjectId    Int
  formId       Int
  createdAt    DateTime     @default(now())
  updatedAt    DateTime     @updatedAt
  formExams    formExams    @relation(fields: [formId], references: [id])
  subjectExams subjectExams @relation(fields: [subjectId], references: [id])
  exam         exam[]

  @@index([formId], map: "examType_formId_fkey")
  @@index([subjectId], map: "examType_subjectId_fkey")
  @@fulltext([name, definition])
}

model exam {
  id               Int                @id @default(autoincrement())
  description      String             @db.LongText
  year             Int
  hasAnswers       Boolean            @default(false)
  published        Boolean            @default(false)
  examTypeId       Int
  exam             String             @db.LongText
  usersId          Int
  createdAt        DateTime           @default(now())
  updatedAt        DateTime           @updatedAt
  examType         examType           @relation(fields: [examTypeId], references: [id])
  users            users              @relation(fields: [usersId], references: [id])
  examDownloadable examDownloadable[]

  @@index([examTypeId], map: "exam_examTypeId_fkey")
  @@index([usersId], map: "exam_usersId_fkey")
  @@fulltext([exam])
  @@fulltext([description])
  @@fulltext([description, exam])
}

model examDownloadable {
  id            Int      @id @default(autoincrement())
  link          String
  fileExtension String
  published     Boolean  @default(false)
  examId        Int
  usersId       Int
  name          String
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
  exam          exam     @relation(fields: [examId], references: [id])
  users         users    @relation(fields: [usersId], references: [id])

  @@index([examId], map: "examDownloadable_examId_fkey")
  @@index([usersId], map: "examDownloadable_usersId_fkey")
}

model subjectReference {
  id                Int             @id @default(autoincrement())
  subjectName       String
  subjectDefinition String          @db.LongText
  imageLocation     String?
  published         Boolean         @default(false)
  usersId           Int
  createdAt         DateTime        @default(now())
  updatedAt         DateTime        @updatedAt
  users             users           @relation(fields: [usersId], references: [id])
  reference         reference[]
  forms             formReference[]

  @@index([usersId], map: "subjectReference_usersId_fkey")
  @@fulltext([subjectDefinition, subjectName])
}

model formReference {
  id        Int                @id @default(autoincrement())
  formName  String
  usersId   Int
  createdAt DateTime           @default(now())
  updatedAt DateTime           @updatedAt
  users     users              @relation(fields: [usersId], references: [id])
  reference reference[]
  subjects  subjectReference[]

  @@index([usersId], map: "formReference_usersId_fkey")
}

model reference {
  id               Int              @id @default(autoincrement())
  name             String
  description      String           @db.LongText
  data             String           @db.LongText
  isPdf            Boolean
  published        Boolean          @default(false)
  subjectId        Int
  usersId          Int
  createdAt        DateTime         @default(now())
  updatedAt        DateTime         @updatedAt
  subjectReference subjectReference @relation(fields: [subjectId], references: [id])
  users            users            @relation(fields: [usersId], references: [id])
  formReference    formReference[]

  @@index([subjectId], map: "reference_subjectId_fkey")
  @@index([usersId], map: "reference_usersId_fkey")
  @@fulltext([name, description, data])
}
